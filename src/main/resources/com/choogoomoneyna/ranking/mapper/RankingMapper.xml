<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.choogoomoneyna.choogoomoneyna_be.ranking.mapper.RankingMapper">

    <!-- ResultMap: DB 결과를 RankingVO에 매핑 -->
    <resultMap id="RankingResultMap" type="com.choogoomoneyna.choogoomoneyna_be.ranking.vo.RankingVO">
        <result property="userId" column="user_id"/>
        <result property="currentRanking" column="current_ranking"/>
        <result property="regDate" column="reg_date"/>
        <result property="updateDate" column="update_date"/>
    </resultMap>

    <!-- 단일 랭킹 삽입 -->
    <insert id="insertRanking" parameterType="com.choogoomoneyna.choogoomoneyna_be.ranking.vo.RankingVO">
        INSERT INTO rankings (user_id, current_ranking, reg_date, update_date)
        VALUES (#{userId}, #{currentRanking}, NOW(), NOW())
    </insert>

    <!-- 전체 랭킹 가져오기 -->
    <select id="getAllRankings" resultType="com.choogoomoneyna.choogoomoneyna_be.ranking.vo.RankingVO">
        SELECT
            user_id,
            current_ranking,
            reg_date,
            update_date
        FROM rankings
    </select>

    <!-- 인당 가장 최근 랭킹만 가져오기 -->
    <select id="findLatestRankingPerUser" resultMap="RankingResultMap">
        SELECT r.user_id, r.current_ranking, r.reg_date, r.update_date
        FROM rankings r
                 INNER JOIN (
            SELECT user_id, MAX(reg_date) AS max_reg_date
            FROM rankings
            GROUP BY user_id
        ) latest ON r.user_id = latest.user_id AND r.reg_date = latest.max_reg_date
    </select>


    <!-- 배치 랭킹 삽입 -->
    <insert id="batchInsertRankings" parameterType="java.util.List">
        INSERT INTO rankings (user_id, current_ranking, reg_date, update_date)
        VALUES
        <foreach collection="rankingVOList" item="rank" separator=",">
            (#{rank.userId}, #{rank.currentRanking}, NOW(), NOW())
        </foreach>
    </insert>

    <!-- 특정 유저의 최신 랭킹만 수정 -->
    <update id="updateCurrentRankingByUserId">
        UPDATE rankings r
            JOIN (
                SELECT user_id, MAX(reg_date) AS max_reg_date
                FROM rankings
                GROUP BY user_id
            ) latest ON r.user_id = latest.user_id AND r.reg_date = latest.max_reg_date
        SET r.current_ranking = #{currentRanking},
            r.update_date = NOW()
        WHERE r.user_id = #{userId}
    </update>


    <!-- 여러 유저의 현재 랭킹 일괄 업데이트 -->
    <update id="batchUpdateCurrentRanking" parameterType="java.util.List">
        UPDATE rankings r
        SET
            current_ranking = (
                CASE
                <foreach collection="rankingUpdateList" item="rank">
                    WHEN r.user_id = #{rank.userId} THEN #{rank.currentRanking}
                </foreach>
                END
            ),
            update_date = (
                CASE
                <foreach collection="rankingUpdateList" item="rank">
                    WHEN r.user_id = #{rank.userId} THEN #{rank.updateDate}
                </foreach>
                END
            )
        WHERE EXISTS (
            SELECT 1
            FROM (
                SELECT user_id, MAX(reg_date) AS max_reg_date
                FROM rankings
                GROUP BY user_id
            ) latest
            WHERE r.user_id = latest.user_id
                AND r.reg_date = latest.max_reg_date
        )
    </update>

    <!-- 특정 유저의 랭킹 전체 조회 -->
    <select id="findAllRankingByUserId" parameterType="long"
            resultMap="RankingResultMap">
        SELECT user_id, current_ranking, reg_date, update_date
        FROM rankings
        WHERE user_id = #{userId}
    </select>

    <!-- 특정 유저의 최신 랭킹 조회 -->
    <select id="findCurrentRankingByUserId" parameterType="long" resultType="int">
        SELECT current_ranking
        FROM rankings
        WHERE user_id = #{userId}
        ORDER BY reg_date DESC
        LIMIT 1
    </select>

</mapper>
